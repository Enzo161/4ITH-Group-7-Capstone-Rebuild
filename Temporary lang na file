models/user.rb

class User < ApplicationRecord
  devise :two_factor_authenticatable,
         :otp_secret_encryption_key => ENV['OTP_SECRET_KEY']

  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :invitable, :registerable,
         :recoverable, :rememberable, :validatable

  include PublicActivity::Model
  tracked only: [:create, :destroy], owner: Proc.new{ |controller, model| controller.current_user }

  has_many :activities, as: :trackable, class_name: 'PublicActivity::Activity'

  # Generate an OTP secret it it does not already exist
  def generate_two_factor_secret_if_missing!
    return unless otp_secret.nil?
    update!(otp_secret: User.generate_otp_secret)
  end

  # Ensure that the user is prompted for their OTP when they login
  def enable_two_factor!
    update!(otp_required_for_login: true)
  end

  # Disable the use of OTP-based two-factor.
  def disable_two_factor!
    update!(
        otp_required_for_login: false,
        otp_secret: nil
        )
  end

end

controllers/TwoFactorSettingsController.rb

class TwoFactorSettingsController < ApplicationController
  before_action :authenticate_user!

  def new
    if current_user.otp_required_for_login
      flash[:alert] = 'Two Factor Authentication is already enabled.'
      return redirect_to edit_user_registration_path
    end

    current_user.generate_two_factor_secret_if_missing!
  end

  def create
    unless current_user.valid_password?(enable_2fa_params[:password])
      flash.now[:alert] = 'Incorrect password'
      return render :new
    end

    if current_user.validate_and_consume_otp!(enable_2fa_params[:code])
      current_user.enable_two_factor!

      flash[:notice] = 'Successfully enabled two factor authentication.'
      redirect_to edit_two_factor_settings_path
    else
      flash.now[:alert] = 'Incorrect Code'
      render :new
    end
  end

  def edit
    unless current_user.otp_required_for_login
      flash[:alert] = 'Please enable two factor authentication first.'
      return redirect_to new_two_factor_settings_path
    end
  end

  def destroy
    if current_user.disable_two_factor!
      flash[:notice] = 'Successfully disabled two factor authentication.'
      redirect_to edit_user_registration_path
    else
      flash[:alert] = 'Could not disable two factor authentication.'
      redirect_back fallback_location: root_path
    end
  end

  private

  def enable_2fa_params
    params.require(:two_fa).permit(:password)
  end

end

routes.rb

resource :two_factor_settings, except: [:index, :show]

devise/two_factor_settings/new.html.erb